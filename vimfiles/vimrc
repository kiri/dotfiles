" .vimrc

"
" vim-plug
let data_dir = has('nvim') ? stdpath('data') . '/site' : has('win32') ? '~/vimfiles' : '~/.vim'
if empty(glob(data_dir . '/autoload/plug.vim'))
  silent execute '!curl -fLo '.data_dir.'/autoload/plug.vim --create-dirs https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim'
  autocmd VimEnter * PlugInstall --sync | source $MYVIMRC
endif
autocmd VimEnter * if len(filter(values(g:plugs), '!isdirectory(v:val.dir)')) | PlugInstall --sync | source $MYVIMRC | endif

" Initialize plugin system
call plug#begin()
Plug 'itchyny/lightline.vim'
Plug 'glidenote/memolist.vim'
Plug 'vim-jp/vimdoc-ja'
Plug 'vim-scripts/vim-auto-save'
"Plug 'mattn/vim-sonictemplate'
"
Plug 'prabirshrestha/vim-lsp'
Plug 'mattn/vim-lsp-settings'

Plug 'delphinus/vim-auto-cursorline'
Plug 'rhysd/vim-healthcheck'

Plug 'yasukotelin/shirotelin'
Plug 'preservim/vim-colors-pencil'
Plug 'yami-beta/lightline-pencil.vim'
call plug#end()

"
set nocompatible
set nowritebackup
set nobackup
set virtualedit=block
set backspace=indent,eol,start
set ambiwidth=double
set wildmenu

set encoding=utf-8
set fileencodings=iso-20220jp,euc-jp,sjis,utf-8
set fileformats=unix,dos,mac

set ignorecase
set smartcase
set wrapscan
set incsearch
set hlsearch

set noerrorbells
"set shellslash
set showmatch matchtime=1
set cinoptions+=:0
set cmdheight=2
set laststatus=2
set showcmd
set display=lastline
set list
set listchars=tab:^\ ,trail:~
set history=10000
hi Comment ctermfg=3
set shiftwidth=0
set softtabstop=-1
set tabstop=2
set expandtab
set guioptions-=T
set guioptions+=a
" set guioptions-=m
set guioptions+=R
set showmatch
set smartindent
set noswapfile
" set nofoldenable
set title
set number
set clipboard=unnamed,autoselect

nnoremap <Esc><Esc> :nohlsearch<CR><ESC>
nnoremap k gk
nnoremap gk k
nnoremap j gj
nnoremap gj j
set nojoinspaces
"nnoremap J gJ
"nnoremap gJ J

syntax on
set nrformats=
set whichwrap=b,s,h,l<,>,[,],~
set mouse=a
set visualbell

"set background=dark
set background=light
"colorscheme desert
"colorscheme toast
"colorscheme shirotelin
colorscheme pencil
set termguicolors

set rop=type:directx

set scrolloff=5
set sidescrolloff=8
set sidescroll=1
set cursorline
"set guifont=HackGen_Console:h14:cSHIFTJIS:qDRAFT

" vim-auto-save
let g:auto_save_events = ["InsertLeave", "TextChanged"]

"let g:lightline = {
"      \ 'colorscheme': 'wombat'
"      \ }

"let g:lightline = {
"      \ 'colorscheme': 'powerline',
"      \ 'active': {
"      \   'left': [ [ 'mode', 'paste' ],
"      \             [  'readonly', 'filename', 'modified' ] ]
"      \ },
"      \ }

"\ 'colorscheme': 'wombat',
       " \ 'colorscheme': 'shirotelin',
let g:lightline = {
        \ 'colorscheme': 'pencil_light',
        \ 'mode_map': {'c': 'NORMAL'},
        \ 'active': {
        \   'left': [ [ 'mode', 'paste' ], [ 'fugitive', 'filename' ] ]
        \ },
        \ 'component_function': {
        \   'modified': 'LightlineModified',
        \   'readonly': 'LightlineReadonly',
        \   'fugitive': 'LightlineFugitive',
        \   'filename': 'LightlineFilename',
        \   'fileformat': 'LightlineFileformat',
        \   'filetype': 'LightlineFiletype',
        \   'fileencoding': 'LightlineFileencoding',
        \   'mode': 'LightlineMode'
        \ }
        \ }

function! LightlineModified()
  return &ft =~ 'help\|vimfiler\|gundo' ? '' : &modified ? '+' : &modifiable ? '' : '-'
endfunction

function! LightlineReadonly()
  return &ft !~? 'help\|vimfiler\|gundo' && &readonly ? 'x' : ''
endfunction

function! LightlineFilename()
  return ('' != LightlineReadonly() ? LightlineReadonly() . ' ' : '') .
        \ (&ft == 'vimfiler' ? vimfiler#get_status_string() :
        \  &ft == 'unite' ? unite#get_status_string() :
        \  &ft == 'vimshell' ? vimshell#get_status_string() :
        \ '' != expand('%:t') ? expand('%:t') : '[No Name]') .
        \ ('' != LightlineModified() ? ' ' . LightlineModified() : '')
endfunction

function! LightlineFugitive()
  if &ft !~? 'vimfiler\|gundo' && exists('*fugitive#head')
    return fugitive#head()
  else
    return ''
  endif
endfunction

function! LightlineFileformat()
  return winwidth(0) > 70 ? &fileformat : ''
endfunction

function! LightlineFiletype()
  return winwidth(0) > 70 ? (&filetype !=# '' ? &filetype : 'no ft') : ''
endfunction

function! LightlineFileencoding()
  return winwidth(0) > 70 ? (&fenc !=# '' ? &fenc : &enc) : ''
endfunction

function! LightlineMode()
  return winwidth(0) > 60 ? lightline#mode() : ''
endfunction

let mapleader="\<Space>"
let g:memolist_path="~/OneDrive/vim-memolist"
let g:memolist_memo_suffix = "md"
let g:memolist_template_dir_path="~/OneDrive/vim-memolist"
let g:auto_save=1
map <Leader>mn  :MemoNew<CR>
map <Leader>ml  :MemoList<CR>
map <Leader>mg  :MemoGrep<CR>

"
" Vim-lspでtextlintを使う設定
"
" 参考
"   https://github.com/prabirshrestha/vim-lsp
"   https://github.com/mattn/vim-lsp-settings
"   https://github.com/mattn/efm-langserver
"   https://zenn.dev/skanehira/articles/2020-11-16-vim-writing-articles
"
" 必要なもの
" Vimプラグインvim-lsp, vim-lsp-settings
" efm-langserverのビルドにgo,
" textlintの実行にnodejs
" go,nodejsともにインストーラーを使わずにzip形式のバイナリを使う前提
" go言語とnode.jsのインストールはzip形式展開して適当なフォルダに置く。
"
" PATHにgo/bin(インストール先の下のbin)とnodejs(=インストール先)と
" %APPDATA\npm(=C:%USERPROFILE%\AppData\Roaming\npm)を追加する。
" ちなみに%APPDATA\npmはnodejs/node_modules/npm/npmrcに書いてある
" prefix=${APPDATA}\npmのこと
"
" それ以外の環境変数は特に設定しなくてもいいようだ
" 設定するとしたら
"   set GOPATH=goのインストール先
"   set NODE_PATH=nodejs\node_modules
"
" ちなみにインストーラーでインストールするとインストール先は
"   C:\Program Files\go
"   C:\Program Files\nodejs
"
" textlintの設定ファイルの位置
"   %USERPROFILE%\.textlintrc
"
""""""""""""""""""""""
" .textlintrcの内容
""""""""""""""""""""""
" {
"   "filters": {},
"   "rules": {
"     // 技術文書向けのtextlintルールプリセット
"     "preset-ja-technical-writing": {
"       "ja-no-weak-phrase": false,
"       "ja-no-mixed-period": false,
"       "no-exclamation-question-mark": false,
"       "max-kanji-continuous-len": {
"         "max": 6,
"         "allow": ["東京都特許許可局"]
"       }
"     },
"     // JTF日本語標準スタイルガイド
"     "preset-jtf-style": true,
"     // textlint rule for prh/prh: proofreading helper.
"     //"prh": false,
"     "prh": {
"       "rulePaths" :[
"       "~/prh/prh-rules/media/techbooster.yml",
"       "~/prh/prh-rules/media/WEB+DB_PRESS.yml"
"       ]
"       },
"     // 同義語を表記ゆれをチェックするtextlintルール
"     "@textlint-ja/no-synonyms": {
"       //許可するワードの配列(無視する)
"       "allows": ["ウェブアプリ", "ウェブアプリケーション"],
"       //使用を許可する見出し語の配列(これ以外の同義語をエラーにする)
"       "preferWords": ["ユーザー"],
"       "allowAlphabet": false,
"       "allowNumber": false,
"       "allowLexeme": false
"     },
"   }
" }
" // npm install textlint-rule-preset-ja-technical-writing -g
" // npm install textlint-rule-preset-jtf-style -g
" // npm install textlint-rule-prh -g
" // npm install @textlint-ja/textlint-rule-no-synonyms sudachi-synonyms-dictionary -g
"
"""""""""""""""""

let g:lsp_diagnostics_signs_enabled = 1
let g:lsp_diagnostics_signs_error = {"text": "💩"}
let g:lsp_diagnostics_signs_warning = {"text": "👻"}
let g:lsp_diagnostics_signs_information = {"text": "❗"}
let g:lsp_diagnostics_signs_hint = {"text": "❓"}

let g:lsp_document_code_action_signs_enabled = 1
let g:lsp_document_code_action_signs_hint = {"text": "❓"}
if !has('nvim')
  let g:lsp_diagnostics_float_cursor = 1
endif

"ログ採取
"let g:lsp_log_verbose = 1
"let g:lsp_log_file = expand('~/vim-lsp.log')

"vim-lsp-settingsのサーバインストール先
"let g:lsp_settings_servers_dir = expand('~/vimfiles/vim-lsp-servers')
"デフォルトvim-lsp-settingsで導入されるefm-langerverの位置はここ(let g:lsp_settings_servers_dir=<path> )
" %USERPROFILE%\AppData\Local\vim-lsp-settings\servers\efm-langserver\efm-langserver.exe

"vim-lsp-settingsの設定
let g:lsp_settings = {
      \ 'efm-langserver': {
      \   'args': ['-c', expand('~/vimfiles/vim-lsp-servers/efm-langserver-config.yaml')],
      \   'disabled': 0,
      \   'allowlist': ['markdown'],
      \  }
      \ }
" デフォルトefm-langserverの設定ファイルの位置はここ(efm-langserver -c <config.yaml>)
" %USERPROFILE%\AppData\Roaming\efm-langserver\config.yaml
"
""""""""""""""""""""""
" config.yaml
""""""""""""""""""""""
"version: 2
"tools:
"  markdown-textlint: &markdown-textlint
"    lint-command: 'npx textlint  -f unix --stdin --stdin-filename ${INPUT}'
"    lint-stdin: true
"    lint-ignore-exit-code: true
"    lint-formats:
"      - '%f:%l:%c: %m [%trror/%r]'
"    root-markers:
"      - .textlintrc
"languages:
"  markdown:
"    - <<: *markdown-textlint
""""""""""""""""""""""
"
function! s:on_lsp_buffer_enabled() abort
  setlocal completeopt=menu
  setlocal omnifunc=lsp#complete
  setlocal signcolumn=yes

  nmap <buffer> [g <plug>(lsp-previous-diagnostic)
  nmap <buffer> ]g <plug>(lsp-next-diagnostic)
endfunction

augroup lsp_install
  au!
  au User lsp_buffer_enabled call s:on_lsp_buffer_enabled()
augroup END

" Lsp Hignlight color:Pencil
" Normal         xxx ctermfg=8 ctermbg=15 guifg=#424242 guibg=#F1F1F1
" Error          xxx term=reverse cterm=bold ctermfg=231 ctermbg=1 gui=bold guifg=#FFFFFF guibg=#C30771
" Todo           xxx term=standout cterm=bold ctermfg=231 ctermbg=9 gui=bold guifg=#FFFFFF guibg=#fb007a
" SpellBad       xxx term=reverse cterm=undercurl ctermfg=1 gui=undercurl guifg=#C30771 guisp=#C30771
" SpellRare      xxx term=reverse cterm=undercurl ctermfg=9 gui=undercurl guifg=#fb007a guisp=#fb007a
highlight LspErrorHighlight term=reverse cterm=undercurl ctermfg=8 ctermbg=15 gui=undercurl guifg=#424242 guibg=#F1F1F1 guisp=#C30771
highlight LspWaningHighlight term=reverse cterm=undercurl ctermfg=8 ctermbg=15 gui=undercurl guifg=#5FD7A7 guisp=#5FD7A7 guisp=#fb007a
highlight link LspErrorText Normal
highlight link LspWarningText Normal

